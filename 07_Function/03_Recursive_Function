ðŸ§© What is a Recursive Function?
A recursive function is a function that calls itself to solve a smaller instance of the same problem.
ðŸ”¸ The function must have a base case to stop the recursion; otherwise, it will call itself indefinitely, leading to a stack overflow.



ðŸ§© Key Components of Recursion:
Base Case: The condition where the function stops calling itself.
Recursive Case: The part of the function where it calls itself to break the problem down into simpler parts.



ðŸ§© Why Use Recursion?
Makes problems like factorial, Fibonacci, and tree traversal easier to solve.
Helps break down complex problems into smaller, more manageable sub-problems.


ðŸ”¹ðŸ§© Types of Recursion:
1.Direct Recursion
2.Indirect Recursion
3.Tail Recursion
4.Non-Tail Recursion
5.Linear Recursion
6.Tree Recursion





ðŸ”¹ðŸ“Œ 1. Direct Recursion
ðŸ§© What is Direct Recursion?
A function is said to use direct recursion when it calls itself directly in its body.

âœ… Example: Factorial

#include <stdio.h>

int factorial(int n) {
    if (n == 0)  // Base case
        return 1;
    else
        return n * factorial(n - 1);  // Direct recursion
}

int main() {
    int num = 5;
    printf("Factorial of %d = %d\n", num, factorial(num));
    return 0;
}






ðŸ”¹ðŸ“Œ 2. Indirect Recursion
ðŸ§© What is Indirect Recursion?
Indirect recursion occurs when a function calls another function, and that second function calls the first one back. This creates a cycle of function calls.

âœ… Example:
#include <stdio.h>
void functionB(int n);
void functionA(int n);
void functionA(int n) {
    if (n == 0)  // Base case
        return;
    else {
        printf("%d ", n);
        functionB(n - 1);
    }
}
void functionB(int n) {
    if (n == 0)  // Base case
        return;
    else {
        printf("%d ", n);
        functionA(n - 1);
    }
}
int main() {
    int num = 5;
    functionA(num);  // Starts the chain of function calls
    return 0;
}
ðŸ§¾ Sample Output:

5 4 3 2 1 1 2 3 4 5






ðŸ”¹ðŸ“Œ 3. Tail Recursion
ðŸ§© What is Tail Recursion?
A function is tail-recursive if the recursive call is the last operation in the function. It allows the compiler to optimize the recursion by reusing the stack frame (no extra space is required after the recursive call).

âœ… Example: Tail Recursion for Factorial
#include <stdio.h>
int factorialTail(int n, int result) {
    if (n == 0)  // Base case
        return result;
    else
        return factorialTail(n - 1, n * result);  // Tail recursion
}
int main() {
    int num = 5;
    printf("Factorial of %d = %d\n", num, factorialTail(num, 1));
    return 0;
}
ðŸ§¾ Sample Output:

Factorial of 5 = 120




ðŸ”¹ðŸ“Œ 4. Non-Tail Recursion
ðŸ§© What is Non-Tail Recursion?
A function is non-tail-recursive if the recursive call is not the last operation in the function. After the recursive call, the function performs additional operations before returning a result.

âœ… Example: Non-Tail Recursion for Factorial

#include <stdio.h>
int factorialNonTail(int n) {
    if (n == 0)  // Base case
        return 1;
    else
        return n * factorialNonTail(n - 1);  // Non-tail recursion
}
int main() {
    int num = 5;
    printf("Factorial of %d = %d\n", num, factorialNonTail(num));
    return 0;
}



ðŸ§¾ Sample Output:

Factorial of 5 = 120





ðŸ§© What is Linear Recursion?
A function is said to be linearly recursive when it makes a single recursive call within its body.

âœ… Example: Sum of N numbers

#include <stdio.h>
int sum(int n) {
    if (n == 0)  // Base case
        return 0;
    else
        return n + sum(n - 1);  // Linear recursion
}
int main() {
    int num = 5;
    printf("Sum of first %d natural numbers = %d\n", num, sum(num));
    return 0;
}


ðŸ§¾ Sample Output:

Sum of first 5 natural numbers = 15






ðŸ”¹ðŸ“Œ 6. Tree Recursion
ðŸ§© What is Tree Recursion?
A function is said to use tree recursion when it makes multiple recursive calls (usually more than one) in the function body.

âœ… Example: Fibonacci (Tree Recursion)

#include <stdio.h>
int fibonacci(int n) {
    if (n == 0)  // Base case
        return 0;
    else if (n == 1)  // Base case
        return 1;
    else
        return fibonacci(n - 1) + fibonacci(n - 2);  // Tree recursion
}
int main() {
    int num = 6;
    printf("Fibonacci of %d = %d\n", num, fibonacci(num));
    return 0;
}


ðŸ§¾ Sample Output:

Fibonacci of 6 = 8


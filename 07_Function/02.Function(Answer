‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê CODECRAFT BY ASHIKA ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

üü¢ Language ‚û° C
üü¢ Topic ‚û° Functions

Function(Answer)



‚≠ê 1. Area of a Circle 

Description:
This function takes the radius as a parameter and returns the area of a circle using the formula:
‚ÄÉ‚ÄÉarea = œÄ √ó radius¬≤

#include <stdio.h>
#define PI 3.14159
float areaOfCircle(float radius);
float areaOfCircle(float radius) {
    return PI * radius * radius;
}
int main() {
    float radius = 5.0;
    float area = areaOfCircle(radius);
    printf("Area of the circle with radius %.2f is: %.2f\n", radius, area);
    return 0;
}




‚≠ê 2. Simple Interest (TSRS)
Description:
Calculates the simple interest given the principal, rate, and time.

Formula:
‚ÄÉ‚ÄÉSimple Interest = (Principal √ó Rate √ó Time) / 100

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
float simpleInterest(float principal, float rate, float time);

// Function Definition
float simpleInterest(float principal, float rate, float time) {
    return (principal * rate * time) / 100;
}

int main() {
    float principal = 1000, rate = 5, time = 2;
    float interest = simpleInterest(principal, rate, time);
    printf("Simple Interest = %.2f\n", interest);
    return 0;
}
‚≠ê 3. Check Even or Odd (TSRS)
Description:
Returns 1 if the number is even; otherwise, returns 0.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
int isEven(int number);

// Function Definition
int isEven(int number) {
    return (number % 2 == 0) ? 1 : 0;
}

int main() {
    int number = 7;
    if(isEven(number))
        printf("%d is Even.\n", number);
    else
        printf("%d is Odd.\n", number);
    return 0;
}
‚≠ê 4. Print First N Natural Numbers (TSRN)
Description:
Prints the first N natural numbers.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
void printNaturalNumbers(int N);

// Function Definition
void printNaturalNumbers(int N) {
    for(int i = 1; i <= N; i++){
        printf("%d ", i);
    }
    printf("\n");
}

int main() {
    int N = 10;
    printf("First %d natural numbers: ", N);
    printNaturalNumbers(N);
    return 0;
}
‚≠ê 5. Print First N Odd Natural Numbers (TSRN)
Description:
Prints the first N odd natural numbers.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
void printOddNumbers(int N);

// Function Definition
void printOddNumbers(int N) {
    int count = 0, number = 1;
    while(count < N) {
        if (number % 2 != 0) {
            printf("%d ", number);
            count++;
        }
        number++;
    }
    printf("\n");
}

int main() {
    int N = 10;
    printf("First %d odd natural numbers: ", N);
    printOddNumbers(N);
    return 0;
}
‚≠ê 6. Factorial of a Number (TSRS)
Description:
Calculates the factorial of a number using iteration (or recursion).

Code Example (Iterative):

c
Copy
Edit
#include <stdio.h>

// Function Declaration
long long factorial(int n);

// Function Definition
long long factorial(int n) {
    long long fact = 1;
    for(int i = 1; i <= n; i++) {
        fact *= i;
    }
    return fact;
}

int main() {
    int n = 5;
    printf("Factorial of %d is: %lld\n", n, factorial(n));
    return 0;
}
‚≠ê 7. Number of Combinations (nCr) (TSRS)
Description:
Calculates the number of combinations (nCr) using the formula:
‚ÄÉ‚ÄÉnCr = n! / (r! * (n - r)!)

Code Example:

c
Copy
Edit
#include <stdio.h>

// Helper function: factorial
long long factorial(int n) {
    long long fact = 1;
    for(int i = 1; i <= n; i++) {
        fact *= i;
    }
    return fact;
}

// Function Declaration for nCr
long long combination(int n, int r);

// Function Definition
long long combination(int n, int r) {
    return factorial(n) / (factorial(r) * factorial(n - r));
}

int main() {
    int n = 7, r = 3;
    printf("Number of combinations (nCr) for n=%d, r=%d is: %lld\n", n, r, combination(n, r));
    return 0;
}
‚≠ê 8. Number of Arrangements (nPr) (TSRS)
Description:
Calculates the number of arrangements (nPr) using the formula:
‚ÄÉ‚ÄÉnPr = n! / (n - r)!

Code Example:

c
Copy
Edit
#include <stdio.h>

// Helper function: factorial
long long factorial(int n) {
    long long fact = 1;
    for(int i = 1; i <= n; i++){
        fact *= i;
    }
    return fact;
}

// Function Declaration for nPr
long long permutation(int n, int r);

// Function Definition
long long permutation(int n, int r) {
    return factorial(n) / factorial(n - r);
}

int main() {
    int n = 7, r = 3;
    printf("Number of arrangements (nPr) for n=%d, r=%d is: %lld\n", n, r, permutation(n, r));
    return 0;
}
‚≠ê 9. Check if a Number Contains a Given Digit (TSRS)
Description:
The function checks if a specified digit is present in a given number. Returns 1 if found; otherwise, returns 0.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
int containsDigit(int number, int digit);

// Function Definition
int containsDigit(int number, int digit) {
    while(number != 0) {
        if(number % 10 == digit)
            return 1;
        number /= 10;
    }
    return 0;
}

int main() {
    int number = 12345, digit = 3;
    if(containsDigit(number, digit))
        printf("The number %d contains the digit %d.\n", number, digit);
    else
        printf("The number %d does not contain the digit %d.\n", number, digit);
    return 0;
}
‚≠ê 10. Print All Prime Factors of a Given Number (TSRN)
Description:
Prints all prime factors of a number. For example, 36 should print: 2, 2, 3, 3.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
void printPrimeFactors(int number);

// Function Definition
void printPrimeFactors(int number) {
    // Print number of 2s that divide number
    while(number % 2 == 0) {
        printf("2 ");
        number /= 2;
    }
    // Now number is odd, check for odd factors
    for(int i = 3; i * i <= number; i += 2) {
        while(number % i == 0) {
            printf("%d ", i);
            number /= i;
        }
    }
    // If number is a prime greater than 2
    if(number > 2)
        printf("%d", number);
    printf("\n");
}

int main() {
    int number = 36;
    printf("Prime factors of %d are: ", number);
    printPrimeFactors(number);
    return 0;
}
‚≠ê 11. Least Common Multiple (LCM) (TSRS)
Description:
Calculates the LCM of two numbers. One common method is by using the HCF (greatest common divisor).

Formula:
‚ÄÉ‚ÄÉLCM(a, b) = (a * b) / HCF(a, b)

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declarations
int hcf(int a, int b);
int lcm(int a, int b);

// Function Definitions
int hcf(int a, int b) {
    while(b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int lcm(int a, int b) {
    return (a * b) / hcf(a, b);
}

int main() {
    int a = 12, b = 18;
    printf("LCM of %d and %d is: %d\n", a, b, lcm(a, b));
    return 0;
}
‚≠ê 12. Highest Common Factor (HCF) (TSRS)
Description:
Calculates the HCF (or GCD) of two numbers using Euclid‚Äôs algorithm.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
int hcf(int a, int b);

// Function Definition
int hcf(int a, int b) {
    while(b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    int a = 12, b = 18;
    printf("HCF of %d and %d is: %d\n", a, b, hcf(a, b));
    return 0;
}
‚≠ê 13. Check Whether a Number is Prime (TSRS)
Description:
Returns 1 if the number is prime; otherwise, returns 0.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
int isPrime(int number);

// Function Definition
int isPrime(int number) {
    if(number <= 1)
        return 0; // 0 and 1 are not prime numbers
    for(int i = 2; i * i <= number; i++){
        if(number % i == 0)
            return 0;
    }
    return 1;
}

int main() {
    int number = 29;
    if(isPrime(number))
        printf("%d is a prime number.\n", number);
    else
        printf("%d is not a prime number.\n", number);
    return 0;
}
‚≠ê 14. Find the Next Prime Number (TSRS)
Description:
Finds the next prime number greater than the given number.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Reuse isPrime from previous example
int isPrime(int number) {
    if(number <= 1)
        return 0;
    for(int i = 2; i * i <= number; i++) {
        if(number % i == 0)
            return 0;
    }
    return 1;
}

// Function Declaration
int nextPrime(int number);

// Function Definition
int nextPrime(int number) {
    int next = number + 1;
    while(!isPrime(next)) {
        next++;
    }
    return next;
}

int main() {
    int number = 29;
    printf("The next prime number after %d is: %d\n", number, nextPrime(number));
    return 0;
}
‚≠ê 15. Print First N Prime Numbers (TSRN)
Description:
Prints the first N prime numbers.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Reuse isPrime from earlier
int isPrime(int number) {
    if(number <= 1)
        return 0;
    for(int i = 2; i * i <= number; i++) {
        if(number % i == 0)
            return 0;
    }
    return 1;
}

// Function Declaration
void printNPrimes(int N);

// Function Definition
void printNPrimes(int N) {
    int count = 0, num = 2;
    while(count < N) {
        if(isPrime(num)) {
            printf("%d ", num);
            count++;
        }
        num++;
    }
    printf("\n");
}

int main() {
    int N = 10;
    printf("First %d prime numbers: ", N);
    printNPrimes(N);
    return 0;
}
‚≠ê 16. Print All Prime Numbers Between Two Numbers (TSRN)
Description:
Prints all prime numbers in the range [start, end].

Code Example:

c
Copy
Edit
#include <stdio.h>

// Reuse isPrime from earlier
int isPrime(int number) {
    if(number <= 1)
        return 0;
    for(int i = 2; i * i <= number; i++) {
        if(number % i == 0)
            return 0;
    }
    return 1;
}

// Function Declaration
void printPrimesInRange(int start, int end);

// Function Definition
void printPrimesInRange(int start, int end) {
    for(int i = start; i <= end; i++){
        if(isPrime(i))
            printf("%d ", i);
    }
    printf("\n");
}

int main() {
    int start = 20, end = 50;
    printf("Prime numbers between %d and %d: ", start, end);
    printPrimesInRange(start, end);
    return 0;
}
‚≠ê 17. Print First N Terms of Fibonacci Series (TSRN)
Description:
Prints the first N terms of the Fibonacci series.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
void printFibonacci(int N);

// Function Definition
void printFibonacci(int N) {
    int a = 0, b = 1;
    if(N >= 1)
        printf("%d ", a);
    if(N >= 2)
        printf("%d ", b);
    for(int i = 3; i <= N; i++){
        int next = a + b;
        printf("%d ", next);
        a = b;
        b = next;
    }
    printf("\n");
}

int main() {
    int N = 10;
    printf("First %d terms of the Fibonacci series: ", N);
    printFibonacci(N);
    return 0;
}
‚≠ê 18. Print Pascal's Triangle (TSRN)
Description:
Prints Pascal‚Äôs Triangle with a specified number of rows.
Each element is calculated using the combination formula.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Helper function to calculate factorial
long long factorial(int n) {
    long long fact = 1;
    for(int i = 1; i <= n; i++){
        fact *= i;
    }
    return fact;
}

// Function to calculate combination nCr = n! / (r! * (n-r)!)
long long combination(int n, int r) {
    return factorial(n) / (factorial(r) * factorial(n - r));
}

// Function Declaration
void printPascalsTriangle(int rows);

// Function Definition
void printPascalsTriangle(int rows) {
    for (int i = 0; i < rows; i++) {
        // Print spaces for alignment
        for (int j = 0; j < rows - i - 1; j++) {
            printf("  ");
        }
        // Print elements of the row
        for (int j = 0; j <= i; j++) {
            printf("%lld   ", combination(i, j));
        }
        printf("\n");
    }
}

int main() {
    int rows = 5;
    printf("Pascal's Triangle with %d rows:\n", rows);
    printPascalsTriangle(rows);
    return 0;
}
‚≠ê 19. Square of a Number Using a Function (TSRS)
Description:
This function takes a number as input and returns its square.

Code Example:

c
Copy
Edit
#include <stdio.h>

// Function Declaration
int square(int number);

// Function Definition
int square(int number) {
    return number * number;
}

int main() {
    int number = 8;
    int sq = square(number);
    printf("Square of %d is: %d\n", number, sq);
    return 0;
}

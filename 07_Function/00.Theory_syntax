⭐⭐⭐⭐⭐⭐⭐ CODECRAFT BY ASHIKA ⭐⭐⭐⭐⭐⭐⭐

🟢 Language ➡ C
🟢 Topic ➡ Functions


🔹 What is a Function in C?
     👉A function in C is a block of code designed to perform a specific task. It allows for code reuse, better organization, and modularity. Functions help break down complex programs into smaller, manageable chunks of code, making it easier to maintain and understand.



Types of Function:
1.Library Function  [printf(),scanf()}
2.User-Defined Function



🔸 1. Function Declaration (Prototype)
    📥 A function declaration tells the compiler about the function's name, return type, and parameters. It gives the compiler the information it needs to call the function correctly.

👉Syntax:
    return_type function_name(parameter_list);
👉Example:
    int add(int, int); 






🔸 2. Function Definition
   📥  The function definition provides the actual implementation of the function. It defines the behavior and logic the function should execute.

👉Syntax:
     return_type function_name(parameter_list) {
     }
👉Example:
    int add(int a, int b) {
         return a + b; 
    }






🔸 3. Function Call
   📥  To execute a function, you need to call it from another part of the program, usually the main function or another function.

👉Syntax:
    function_name(argument_list); 
👉Example:
    int result = add(5, 3);  






🔸 4. Function with Parameters (Pass-by-Value)
    📥 In pass-by-value, the function receives copies of the arguments passed to it, meaning any changes made inside the function do not affect the original values.

Example:
#include <stdio.h>
void add(int a, int b) { 
    int sum = a + b;   
    printf("Sum: %d\n", sum); 
}
int main() {
    add(5, 10);  
    return 0;
}







🔸 5. Function with Return & No Parameters
    📥 A function can return a value and may not take any parameters.

Example:
#include <stdio.h>
int getNumber() { 
    return 10;  
}
int main() {
    int num = getNumber();  
    printf("Number: %d\n", num);  
    return 0;
}







🔸 6. Function  without Parameter and with Return Value
  📥 A function can return a value after completing its task. The return value is typically captured in a variable in the calling function.

Example:

#include <stdio.h>
int square(int x) { 
    return x * x;  
}
int main() {
    int result = square(5);  
    printf("Square: %d\n", result);  
    return 0;
}






🔸 7. Function withoutParameter and without  Return Value
  📥 A function can also not return any value, in which case the return type is void.

Example:

#include <stdio.h>
void displayMessage() {
    printf("This function does not return a value.\n");
}
int main() {
    displayMessage(); 
    return 0;
}






🔁 Function Concepts: Call by Value vs Call by Reference in C
🔹📘 THEORY
🧩 What is Call by Value?
👉 When actual values of arguments are copied into the function’s formal parameters.
👉 Changes made inside the function do not reflect in the original variables.



🧩 What is Call by Reference?
👉 Instead of passing actual values, addresses of variables are passed.
👉 Changes made inside the function do affect the original variables.
👉 Implemented using pointers in C.



🔹💡 EXAMPLE 1: Call by Value
📄 Question: Write a program to swap two numbers using Call by Value.

✅ Answer:

#include <stdio.h>
void swap(int a, int b) {
    int temp = a;
    a = b;
    b = temp;
    printf("Inside swap() -> a = %d, b = %d\n", a, b);
}
int main() {
    int x = 10, y = 20;
    printf("Before swap() -> x = %d, y = %d\n", x, y);
    swap(x, y);
    printf("After swap() -> x = %d, y = %d\n", x, y);

    return 0;
}




🧾 Sample Output:

Before swap() -> x = 10, y = 20
Inside swap() -> a = 20, b = 10
After swap() -> x = 10, y = 20

🎯 Conclusion:
🔸 Swapping inside the function does not affect original values → Call by Value




🔹💡 EXAMPLE 2: Call by Reference
📄 Question: Write a program to swap two numbers using Call by Reference.

✅ Answer:

#include <stdio.h>
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
    printf("Inside swap() -> *a = %d, *b = %d\n", *a, *b);
}
int main() {
    int x = 10, y = 20;
    printf("Before swap() -> x = %d, y = %d\n", x, y);
    swap(&x, &y);
    printf("After swap() -> x = %d, y = %d\n", x, y);
    return 0;
}
🧾 Sample Output:

Before swap() -> x = 10, y = 20
Inside swap() -> *a = 20, *b = 10
After swap() -> x = 20, y = 10


🎯 Conclusion:
🔸 Swapping affects original variables → Call by Reference (via pointers)





🔹📌 DIFFERENCE TABLE
Feature	                Call by Value  	    Call by Reference
What is passed?	     Actual value	         Address (reference)
Affect on original?	     ❌ No	              ✅ Yes
Memory used?	         Separate copies	         Shared memory via address
Use of pointers?	    ❌ Not needed            ✅ Required





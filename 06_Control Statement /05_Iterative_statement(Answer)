⭐⭐⭐⭐⭐⭐⭐ CODECRAFT BY ASHIKA ⭐⭐⭐⭐⭐⭐⭐

🟢 Language ➡ C
🟢 Topic ➡ Iterative Control Instructions

🔹 🧠 1. WAP to print C-Programming 10 times on the screen.

#include <stdio.h>
int main() {
    for (int i = 0; i < 10; i++) {
        printf("C-Programming\n");
    }
    return 0;
}

🖥️ Sample Output:
C-Programming
C-Programming
C-Programming
C-Programming
C-Programming
C-Programming
C-Programming
C-Programming
C-Programming
C-Programming





🔹 🧠 2. WAP to print the first 10 natural numbers.

#include <stdio.h>
int main() {
    for (int i = 1; i <= 10; i++) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
1 2 3 4 5 6 7 8 9 10 






🔹 🧠 3. WAP to print the first 10 natural numbers in reverse order.

#include <stdio.h>
int main() {
    for (int i = 10; i >= 1; i--) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
10 9 8 7 6 5 4 3 2 1 








🔹 🧠 4. WAP to print the first 10 odd natural numbers.

#include <stdio.h>
int main() {
    for (int i = 1; i <= 20; i += 2) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
1 3 5 7 9 11 13 15 17 19 








🔹 🧠 5. WAP to print the first 10 odd natural numbers in reverse order.

#include <stdio.h>
int main() {
    for (int i = 19; i >= 1; i -= 2) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
19 17 15 13 11 9 7 5 3 1 









🔹 🧠 6. WAP to print the first 10 even natural numbers.

#include <stdio.h>
int main() {
    for (int i = 2; i <= 20; i += 2) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
2 4 6 8 10 12 14 16 18 20 








🔹 🧠 7. WAP to print the first 10 even natural numbers in reverse order.

#include <stdio.h>
int main() {
    for (int i = 20; i >= 2; i -= 2) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
20 18 16 14 12 10 8 6 4 2 








🔹 🧠 8. WAP to print squares of the first 10 natural numbers.

#include <stdio.h>
int main() {
    for (int i = 1; i <= 10; i++) {
        printf("%d ", i * i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
1 4 9 16 25 36 49 64 81 100 









🔹 🧠 9. WAP to print cubes of the first 10 natural numbers.

#include <stdio.h>
int main() {
    for (int i = 1; i <= 10; i++) {
        printf("%d ", i * i * i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
1 8 27 64 125 216 343 512 729 1000 








🔹 🧠 10. WAP to print a table of 8.

#include <stdio.h>
int main() {
    for (int i = 1; i <= 10; i++) {
        printf("8 x %d = %d\n", i, 8 * i);
    }
    return 0;
}

🖥️ Sample Output:
8 x 1 = 8
8 x 2 = 16
8 x 3 = 24
8 x 4 = 32
8 x 5 = 40
8 x 6 = 48
8 x 7 = 56
8 x 8 = 64
8 x 9 = 72
8 x 10 = 80





🔹 🧠 11. WAP to print C-Programming N times on the screen.

#include <stdio.h>
int main() {
    int N;
    printf("Enter the number of times to print C-Programming: ");
    scanf("%d", &N);
    for (int i = 0; i < N; i++) {
        printf("C-Programming\n");
    }
    return 0;
}
🖥️ Sample Output:
Enter the number of times to print C-Programming: 5
C-Programming
C-Programming
C-Programming
C-Programming
C-Programming







🔹 🧠 12. WAP to print the first N natural numbers.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
Enter a positive integer N: 5
1 2 3 4 5 









🔹 🧠 13. WAP to print the first N natural numbers in reverse order.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = N; i >= 1; i--) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
Enter a positive integer N: 5
5 4 3 2 1 








🔹 🧠 14. WAP to print the first N odd natural numbers.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= 2 * N; i += 2) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
Enter a positive integer N: 5
1 3 5 7 9








🔹 🧠15. WAP to print the first N odd natural numbers in reverse order.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 2 * N - 1; i >= 1; i -= 2) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
Enter a positive integer N: 5
9 7 5 3 1 









🔹 🧠 16. WAP to print the first N even natural numbers.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 2; i <= 2 * N; i += 2) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
Enter a positive integer N: 5
2 4 6 8 10 








🔹 🧠 17. WAP to print the first N even natural numbers in reverse order.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 2 * N; i >= 2; i -= 2) {
        printf("%d ", i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
Enter a positive integer N: 5
10 8 6 4 2 








🔹 🧠 18. WAP to print squares of the first N natural numbers.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        printf("%d ", i * i);
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
Enter a positive integer N: 5
1 4 9 16 25 










🔹 🧠 19. WAP to print cubes of the first N natural numbers.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        printf("%d ", i * i * i);
    }
    printf("\n");
    return 0;
}


🖥️ Sample Output:
Enter a positive integer N: 5
1 8 27 64 125 









🔹 🧠20. WAP to print a table of N.

#include <stdio.h>
int main() {
    int N;
    printf("Enter a number to print its table: ");
    scanf("%d", &N);
    for (int i = 1; i <= 10; i++) {
        printf("%d x %d = %d\n", N, i, N * i);
    }
    return 0;
}


🖥️ Sample Output:
Enter a number to print its table: 5
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50






🔹 🧠 21. WAP to calculate the sum of the first N natural numbers.

#include <stdio.h>
int main() {
    int N, sum = 0;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        sum += i;
    }
    printf("Sum of first %d natural numbers = %d\n", N, sum);
    return 0;
}


🖥️ Sample Output:
Enter a positive integer N: 5
Sum of first 5 natural numbers = 15







🔹 🧠 22. WAP to calculate the sum of the first N even natural numbers.

#include <stdio.h>
int main() {
    int N, sum = 0;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        sum += 2 * i;
    }
    printf("Sum of first %d even natural numbers = %d\n", N, sum);
    return 0;
}

🖥️ Sample Output:
Enter a positive integer N: 5
Sum of first 5 even natural numbers = 30





🔹 🧠 23. WAP to calculate the sum of the first N odd natural numbers.

#include <stdio.h>
int main() {
    int N, sum = 0;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        sum += 2 * i - 1;
    }
    printf("Sum of first %d odd natural numbers = %d\n", N, sum);
    return 0;
}

🖥️ Sample Output:
Enter a positive integer N: 5
Sum of first 5 odd natural numbers = 25






🔹 🧠 24. WAP to calculate the sum of squares of the first N natural numbers.

#include <stdio.h>
int main() {
    int N, sum = 0;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        sum += i * i;
    }
    printf("Sum of squares of first %d natural numbers = %d\n", N, sum);
    return 0;
}

🖥️ Sample Output:
Enter a positive integer N: 5
Sum of squares of first 5 natural numbers = 55








🔹 🧠 25. WAP to calculate the sum of cubes of the first N natural numbers.

#include <stdio.h>
int main() {
    int N, sum = 0;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        sum += i * i * i;
    }
    printf("Sum of cubes of first %d natural numbers = %d\n", N, sum);
    return 0;
}


🖥️ Sample Output:
Enter a positive integer N: 5
Sum of cubes of first 5 natural numbers = 225






🔹 🧠 26. WAP to calculate the factorial of a number.

#include <stdio.h>
int main() {
    int N;
    long long factorial = 1;
    printf("Enter a positive integer N: ");
    scanf("%d", &N);
    for (int i = 1; i <= N; i++) {
        factorial *= i;
    }
    printf("Factorial of %d = %lld\n", N, factorial);
    return 0;
}

🖥️ Sample Output:
Enter a positive integer N: 5
Factorial of 5 = 120








🔹 🧠 27. WAP to count the digits of a given number.

#include <stdio.h>
int main() {
    int number, count = 0;
    printf("Enter an integer: ");
    scanf("%d", &number);
    if (number == 0) {
        count = 1;
    } else {
        while (number != 0) {
            number /= 10;
            count++;
        }
    }
    printf("Number of digits = %d\n", count);
    return 0;
}


🖥️ Sample Output:
Enter an integer: 12345
Number of digits = 5






🔹 🧠 28. WAP to check whether a given number is a prime number or not.

#include <stdio.h>
int main() {
    int number, flag = 0;
    printf("Enter a positive integer: ");
    scanf("%d", &number);
    if (number < 2) {
        printf("%d is not a prime number.\n", number);
        return 0;
    }
    for (int i = 2; i <= number / 2; i++) {
        if (number % i == 0) {
            flag = 1;
            break;
        }
    }
    if (flag == 0) {
        printf("%d is a prime number.\n", number);
    } else {
        printf("%d is not a prime number.\n", number);
    }

    return 0;
}
🖥️ Sample Output:
Enter a positive integer: 17
17 is a prime number.






🔹 🧠 29. WAP to calculate the LCM of two numbers.

#include <stdio.h>
int main() {
    int num1, num2, max, lcm;
    printf("Enter two integers: ");
    scanf("%d %d", &num1, &num2);
    max = (num1 > num2) ? num1 : num2;
    while (1) {
        if (max % num1 == 0 && max % num2 == 0) {
            lcm = max;
            break;
        }
        max++;
    }
    printf("LCM of %d and %d = %d\n", num1, num2, lcm);
    return 0;
}


🖥️ Sample Output:
Enter two integers: 12 15
LCM of 12 and 15 = 60







🔹 🧠 30. WAP to reverse a given number.

#include <stdio.h>
int main() {
    int number, reversed = 0;
    printf("Enter an integer: ");
    scanf("%d", &number);
    while (number != 0) {
        int digit = number % 10;
        reversed = reversed * 10 + digit;
        number /= 10;
    }
    printf("Reversed number = %d\n", reversed);
    return 0;
}

🖥️ Sample Output:
Enter an integer: 12345
Reversed number = 54321






🔹 🧠 31. WAP to find the Nth term of the Fibonacci series.

#include <stdio.h>
int main() {
    int N, first = 0, second = 1, nextTerm;
    printf("Enter the term index (N): ");
    scanf("%d", &N);
    for (int i = 1; i < N; i++) {
        nextTerm = first + second;
        first = second;
        second = nextTerm;
    }
    printf("The %d-th term of Fibonacci series is: %d\n", N, first);
    return 0;
}

🖥️ Sample Output:
Enter the term index (N): 5
The 5-th term of Fibonacci series is: 3







🔹 🧠 32. WAP to print the first N terms of the Fibonacci series.

#include <stdio.h>
int main() {
    int N, first = 0, second = 1, nextTerm;
    printf("Enter the number of terms (N): ");
    scanf("%d", &N);
    printf("Fibonacci Series: ");
    for (int i = 1; i <= N; i++) {
        printf("%d ", first);
        nextTerm = first + second;
        first = second;
        second = nextTerm;
    }
    printf("\n");
    return 0;
}

🖥️ Sample Output:
Enter the number of terms (N): 5
Fibonacci Series: 0 1 1 2 3 








🔹 🧠 33. WAP to check whether a given number is in the Fibonacci series or not.

#include <stdio.h>
int main() {
    int number, first = 0, second = 1, nextTerm;
    int found = 0;
    printf("Enter an integer: ");
    scanf("%d", &number);
    while (first <= number) {
        if (first == number) {
            found = 1;
            break;
        }
        nextTerm = first + second;
        first = second;
        second = nextTerm;
    }
    if (found) {
        printf("%d is in the Fibonacci series.\n", number);
    } else {
        printf("%d is not in the Fibonacci series.\n", number);
    }

    return 0;
}
🖥️ Sample Output:
Enter an integer: 8
8 is in the Fibonacci series.




🔹 🧠 34. WAP to calculate HCF of two numbers.

#include <stdio.h>
int main() {
    int num1, num2, hcf;
    printf("Enter two integers: ");
    scanf("%d %d", &num1, &num2);
    for (int i = 1; i <= num1 && i <= num2; i++) {
        if (num1 % i == 0 && num2 % i == 0) {
            hcf = i;
        }
    }
    printf("HCF of %d and %d = %d\n", num1, num2, hcf);
    return 0;
}

🖥️ Sample Output:
Enter two integers: 12 15
HCF of 12 and 15 = 3








🔹 🧠 35. WAP to check whether two given numbers are co-prime numbers or not.

#include <stdio.h>
int main() {
    int num1, num2, hcf;
    printf("Enter two integers: ");
    scanf("%d %d", &num1, &num2);
    for (int i = 1; i <= num1 && i <= num2; i++) {
        if (num1 % i == 0 && num2 % i == 0) {
            hcf = i;
        }
    }
    if (hcf == 1) {
        printf("%d and %d are co-prime numbers.\n", num1, num2);
    } else {
        printf("%d and %d are not co-prime numbers.\n", num1, num2);
    }
    return 0;
}

🖥️ Sample Output:
Enter two integers: 7 8
7 and 8 are co-prime numbers.








🔹 🧠 36. WAP to print all Prime numbers under 150.

#include <stdio.h>
int main() {
    int i, j, isPrime;
    printf("Prime numbers under 150 are:\n");
    for (i = 2; i < 150; i++) {
        isPrime = 1; 
        for (j = 2; j <= i / 2; j++) {
            if (i % j == 0) {
                isPrime = 0; 
                break;
            }
        }
        if (isPrime) {
            printf("%d ", i);
        }
    }
    printf("\n");
    return 0;
}


🖥️ Sample Output:
Prime numbers under 150 are:
2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 











🔹 🧠 37. WAP to print all Prime numbers between two given numbers.

#include <stdio.h>
int main() {
    int start, end, isPrime;
    printf("Enter two numbers (start end): ");
    scanf("%d %d", &start, &end);
    printf("Prime numbers between %d and %d are:\n", start, end);
    for (int i = start; i <= end; i++) {
        isPrime = 1; 
        if (i < 2) continue; 
        for (int j = 2; j <= i / 2; j++) {
            if (i % j == 0) {
                isPrime = 0; 
                break;
            }
        }
        if (isPrime) {
            printf("%d ", i);
        }
    }
    printf("\n");
    return 0;
}
🖥️ Sample Output:
Enter two numbers (start end): 10 50
Prime numbers between 10 and 50 are:
11 13 17 19 23 29 31 37 41 43 47 








🔹 🧠 38. WAP to find the next Prime number of a given number.

#include <stdio.h>
int main() {
    int number, isPrime;
    printf("Enter a number: ");
    scanf("%d", &number);
    number++; 
    while (1) {
        isPrime = 1; 
        for (int i = 2; i <= number / 2; i++) {
            if (number % i == 0) {
                isPrime = 0; 
                break;
            }
        }
        if (isPrime) {
            break;
        }
        number++;
    }
    printf("Next prime number after %d is %d\n", number - 1, number);
    return 0;
}

🖥️ Sample Output:
Enter a number: 10
Next prime number after 10 is 11








🔹 🧠  39. WAP to check whether a given number is an Armstrong number or not.

#include <stdio.h>
#include <math.h>
int main() {
    int number, originalNumber, remainder, count = 0;
    printf("Enter an integer: ");
    scanf("%d", &number);
    
    originalNumber = number;
    while (originalNumber != 0) {
        originalNumber /= 10;
        count++;
    }
    originalNumber = number;
    int sum = 0;
    while (originalNumber != 0) {
        remainder = originalNumber % 10;
        sum += pow(remainder, count);
        originalNumber /= 10;
    }
    if (sum == number) {
        printf("%d is an Armstrong number.\n", number);
    } else {
        printf("%d is not an Armstrong number.\n", number);
    }

    return 0;
}

🖥️ Sample Output:
Enter an integer: 153
153 is an Armstrong number.








🔹 🧠40. WAP to print all Armstrong numbers under 1000.

#include <stdio.h>
#include <math.h>
int main() {
    printf("Armstrong numbers under 1000 are:\n");
    for (int number = 1; number < 1000; number++) {
        int originalNumber = number, remainder, count = 0;
        while (originalNumber != 0) {
            originalNumber /= 10;
            count++;
        }
        originalNumber = number;
        int sum = 0;
        while (originalNumber != 0) {
            remainder = originalNumber % 10;
            sum += pow(remainder, count);
            originalNumber /= 10;
        }
        if (sum == number) {
            printf("%d ", number);
        }
    }
    printf("\n");
    return 0;
}

🖥️ Sample Output:
Armstrong numbers under 1000 are:
1 2 3 4 5 6 7 8 9 153 370 371 407 








🔹 🧠 41. WAP to find all Prime Factors of a given number.

#include <stdio.h>
int main() {
    int number;
    printf("Enter a positive integer: ");
    scanf("%d", &number); 
    printf("Prime factors of %d are: ", number);
    for (int i = 2; i <= number; i++) {
        while (number % i == 0) {
            printf("%d ", i);
            number /= i;
        }
    }
    printf("\n");
    return 0;
}

🖥️ Sample Output:
Enter a positive integer: 36
Prime factors of 36 are: 2 2 3 3 








🔹 🧠 42. WAP to check whether a given number is a Perfect Number or Not.

#include <stdio.h>
int main() {
    int number, sum = 0;
    printf("Enter a positive integer: ");
    scanf("%d", &number);
    for (int i = 1; i <= number / 2; i++) {
        if (number % i == 0) {
            sum += i;
        }
    }
    if (sum == number) {
        printf("%d is a Perfect Number.\n", number);
    } else {
        printf("%d is not a Perfect Number.\n", number);
    }

    return 0;
}

🖥️ Sample Output:
Enter a positive integer: 28
28 is a Perfect Number.








🔹 🧠43. WAP to input base and exponent from the user then calculate power.

#include <stdio.h>
int main() {
    int base, exponent;
    long long result = 1;
    printf("Enter base: ");
    scanf("%d", &base);
    printf("Enter exponent: ");
    scanf("%d", &exponent);
    for (int i = 0; i < exponent; i++) {
        result *= base;
    }
    printf("%d^%d = %lld\n", base, exponent, result);
    return 0;
}

🖥️ Sample Output:
Enter base: 2
Enter exponent: 3
2^3 = 8

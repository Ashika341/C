⭐⭐⭐⭐⭐⭐⭐ CODECRAFT BY ASHIKA ⭐⭐⭐⭐⭐⭐⭐

🟢 Language ➡ C
🟢 Topic ➡ Array


⭐📘 ARRAY IN C 📘⭐

🔹 What is an Array?
➡️ An array is a collection of homogeneous (same type) elements stored in contiguous memory locations.
➡️ It allows storing multiple values under a single variable name, accessed using index.
`


🔹 Key Features of Arrays:

➡️ Fixed Size: Size must be known at compile time.
➡️ Same Data Type: All elements must be of same type.
➡️ Index-based: Index starts from 0 to size - 1.
➡️ Stored in contiguous memory.
➡️ Faster access to elements using indices.




🔷 Array Declaration and Memory Representation in C
🔸 Declaration
int A[5] = {10, 20, 30, 40, 50};
A[5] means an array of 5 integers.

Let’s assume:
📍 Base Address = 1000
📐 Size of int = 4 bytes

🔸 Address Calculation Formula
        Address of A[i]=Base Address + 𝑖 × Size of Element

Where:
    i = index (starting from 0)
    Size of Element = 4 bytes (for int)
    Base Address = 1000

🔸 Memory Address Table
🔢 Index (i)	🔸 Value	  🧮 Address Calculation   	📍 Memory Address
     0	         10	        1000 + 0 × 4 = 1000       	1000
     1           20       	1000 + 1 × 4 = 1004       	1004
     2         	30	        1000 + 2 × 4 = 1008       	1008
     3	         40	        1000 + 3 × 4 = 1012       	1012
     4 	         50	        1000 + 4 × 4 = 1016	        1016






🔸 TYPES OF ARRAYS IN C

🔹 1️⃣ One-Dimensional Array (1D Array)

📌 Declaration:
int arr[5];
📌 Initialization:
int arr[5] = {10, 20, 30, 40, 50};
📌 Access:
printf("%d", arr[2]);  

📊 Table Representation:
Index	 0 	1	   2 	3	  4
Value	10	20	30	40	50




🔹 1. 🧠 Indexing:
Array indexing starts at 0.
That means the first element is accessed using index 0, the second with 1, and so on.

int numbers[5] = {10, 20, 30, 40, 50};
int first = numbers[0];  



🔹 2. 📏 Size of an Array:
The size must be a positive integer constant at compile time.

int arr[10];   // ✅ Valid: size is a constant
❌ Invalid: Using a variable directly as size during declaration 

int n = 5;
int arr[n];    // ❌ Not allowed in older C standards





🔹 3. ✏️ Accessing & Modifying Elements:
You can use indexing to read or update elements.
numbers[2] = 35;   // Modifies the 3rd element (index 2) to 35





🔹 4. 📐 Array Length (Total Elements):
Use sizeof to compute total elements in a statically declared array:

int numbers[5] = {10, 20, 30, 40, 50};
int length = sizeof(numbers) / sizeof(numbers[0]);






🔹 5. 📤 Passing Arrays to Functions:
Arrays are passed by reference (pointer to first element).
Function can modify original array.

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
}






🔹 2️⃣ Two-Dimensional Array (2D Array)
📌 Declaration:
int matrix[2][3];

📌 Initialization:
int matrix[2][3] = {
    {1, 2, 3},
    {4, 5, 6}
};

📌 Access:
printf("%d", matrix[1][2]); 

📊 Table Representation:
Row\Col	  0	  1	  2
  0	  1	  2	  3
  1       4	  5	  6



🔹 3️⃣ Multi-Dimensional Array (3D and higher)

📌 Declaration:
int cube[2][3][2];
📌 Initialization (sample):
int cube[2][3][2] = {
    {
        {1, 2}, {3, 4}, {5, 6}
    },
    {
        {7, 8}, {9, 10}, {11, 12}
    }
};
🧠 Visualization (Partial):
Layer 0:
Row\Col  	0  	1
    0	       1 	2
    1	       3        4
    2	       5	6

Layer 1:
Row\Col	  0	  1
    0	   7 	  8
    1	   9	 10
    2      11	 12

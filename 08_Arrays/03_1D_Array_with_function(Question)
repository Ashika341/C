‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê CODECRAFT BY ASHIKA ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

üü¢ Language ‚û° C
üü¢ Topic ‚û° 1D Arrays with function (Answer)


01. Find the Largest Number in an Array (1D)

#include <stdio.h>
int findLargest(int arr[], int size) {
    int largest = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] > largest) {
            largest = arr[i];
        }
    }
    return largest;
}







02. Find the Smallest Number in an Array (1D)

#include <stdio.h>
int findSmallest(int arr[], int size) {
    int smallest = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] < smallest) {
            smallest = arr[i];
        }
    }
    return smallest;
}








03. Sort an Array (1D)

#include <stdio.h>
void sortArray(int arr[], int size, int ascending) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = i + 1; j < size; j++) {
            if ((ascending && arr[i] > arr[j]) || (!ascending && arr[i] < arr[j])) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
    }
}







04. Rotate an Array (1D)

#include <stdio.h>
void rotateArray(int arr[], int size, int n, char direction) {
    n = n % size
    if (direction == 'L') {
        for (int i = 0; i < n; i++) {
            int temp = arr[0];
            for (int j = 0; j < size - 1; j++) {
                arr[j] = arr[j + 1];
            }
            arr[size - 1] = temp;
        }
    } else {
        for (int i = 0; i < n; i++) {
            int temp = arr[size - 1];
            for (int j = size - 1; j > 0; j--) {
                arr[j] = arr[j - 1];
            }
            arr[0] = temp;
        }
    }
}






05. Find First Occurrence of Adjacent Duplicates (1D)

#include <stdio.h>
int findFirstAdjacentDuplicate(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        if (arr[i] == arr[i + 1]) {
            return arr[i];
        }
    }
    return -1; 
}






06. Reverse an Array (1D)

#include <stdio.h>
void reverseArray(int arr[], int size) {
    for (int i = 0; i < size / 2; i++) {
        int temp = arr[i];
        arr[i] = arr[size - 1 - i];
        arr[size - 1 - i] = temp;
    }
}






07. Count Total Duplicate Elements (1D)

#include <stdio.h>
int countDuplicateElements(int arr[], int size) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (arr[i] == arr[j]) {
                count++;
                break;
            }
        }
    }
    return count;
}





08. Print All Unique Elements (1D)

#include <stdio.h>
void printUniqueElements(int arr[], int size) {
    int found;
    for (int i = 0; i < size; i++) {
        found = 0;
        for (int j = 0; j < size; j++) {
            if (i != j && arr[i] == arr[j]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            printf("%d ", arr[i]);
        }
    }
}







09. Merge Two Arrays in Descending Order (1D)

#include <stdio.h>
void mergeArrays(int arr1[], int arr2[], int size, int result[]) {
    for (int i = 0; i < size; i++) {
        result[i] = arr1[i];
        result[i + size] = arr2[i];
    }
    sortArray(result, size * 2, 0);
}






10. Count Frequency of Each Element (1D)

#include <stdio.h>
void countFrequency(int arr[], int size) {
    int counted[size]; 
    for (int i = 0; i < size; i++) {
        if (counted[i] != -1) { 
            int frequency = 1;
            for (int j = i + 1; j < size; j++) {
                if (arr[i] == arr[j]) {
                    frequency++;
                    counted[j] = -1; 
                }
            }
            printf("Element %d appears %d times\n", arr[i], frequency);
        }
    }
}





11. C Program to Perform Various Array Operations (1D)

#include <stdio.h>
void displayMenu() {
    printf("1. Find Largest\n");
    printf("2. Find Smallest\n");
    printf("3. Sort Array\n");
    printf("4. Rotate Array\n");
    printf("5. Find First Adjacent Duplicate\n");
    printf("6. Reverse Array\n");
    printf("7. Count Duplicate Elements\n");
    printf("8. Print Unique Elements\n");
    printf("9. Merge Two Arrays\n");
    printf("10. Frequency of Elements\n");
    printf("11. Exit\n");
}
int main() {
    int choice, size;
    printf("Enter size of array: ");
    scanf("%d", &size);
    int arr[size];
    printf("Enter elements of array: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }
    while (1) {
        displayMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Largest: %d\n", findLargest(arr, size));
                break;
            case 2:
                printf("Smallest: %d\n", findSmallest(arr, size));
                break;
            case 3:
                // You could ask if ascending/descending is needed
                break;
            case 4:
                break;
            case 5:
                break;
            case 6:
                reverseArray(arr, size);
                printf("Reversed Array: ");
                for (int i = 0; i < size; i++) {
                    printf("%d ", arr[i]);
                }
                printf("\n");
                break;
            case 7:
                printf("Duplicate count: %d\n", countDuplicateElements(arr, size));
                break;
            case 8:
                printUniqueElements(arr, size);
                break;
            case 9:
                break;
            case 10:
                countFrequency(arr, size);
                break;
            case 11:
                return 0;
            default:
                printf("Invalid choice. Try again.\n");
        }
    }
}

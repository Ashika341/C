⭐⭐⭐⭐⭐⭐⭐ CODECRAFT BY ASHIKA ⭐⭐⭐⭐⭐⭐⭐

🟢 Language ➡ C
🟢 Topic ➡  Introduction to C Language

Introduction to C language

  👉 C is a general-purpose, high-level programming language developed in the early 1970s by Dennis Ritchie at Bell Labs.  
  👉 It bridges the gap between low-level hardware access and high-level program structure, making it ideal for system programming.

 Why Choose C Over Other Languages?

⚡ High Performance
  - Close to hardware → faster execution
  - Great for systems like OS, embedded software

🌍 Portability
  -  Code can be compiled and run on different platforms with minimal changes

🧠 Fine-Grained Control
  -  Direct memory management via pointers
  -  Ideal for hardware-level programming

🏗️ Foundation for Other Languages
  - Languages like C++, Java, and Python are influenced by C’s syntax and structure

📚 Rich Standard Library
  -  Built-in functions for I/O, string handling, math, etc.


🔸 History of C Language
- 1969–1973: Developed from the B language → C by Dennis Ritchie
- 1973: Used to rewrite the UNIX OS in C → Boosted its popularity
- 1989: Standardized by ANSI → ANSI C (C89)
- 1999 / 2011 / 2018: C99, C11, C18 → added features like inline functions, multi-threading, etc.


🔹 Key Characteristics / Features of C Language

🧠 High-Level Language
  ➤ Designed to be human-readable while offering low-level access
  ➤ Abstracts hardware complexities

📏 Small Language
  ➤ Contains only 32 keywords
  ➤ Simple syntax, easy to learn and use

🌐 Portable
  ➤ Write once, compile anywhere
  ➤ Minimal modifications needed for different platforms

📚 Built-in Functions
  ➤ Rich standard library (e.g., stdio.h, math.h)
  ➤ Supports tasks like I/O, string operations, math, etc.

🧩 Structural Language
  ➤ Encourages modular programming
  ➤ Use of functions, loops, and conditionals enhances readability and reusability

📍 Pointers
  ➤ Allows direct memory access
  ➤ Supports dynamic structures like linked lists, trees, etc.

🧱 Extensible Language
  ➤ Users can define their own functions
  ➤ Libraries can be created for reuse

🔄 Dynamic Memory Allocation
  ➤ Functions like malloc(), calloc(), free() enable flexible memory use at runtime

🔠 Case Sensitive
  ➤ Identifiers like Variable and variable are treated differently

⚙️ Embedded Systems Friendly
  ➤ Popular in embedded development
  ➤ Provides control over hardware with efficient code

🖥️ Platform Dependent (Partially)
  ➤ While mostly portable, some system-specific code may vary across OS

🚀 Fast Execution (Compiled)
  ➤ C code is compiled directly to machine code
  ➤ Results in high performance and speed



🔹 Structure of a C Program
A C program is typically divided into the following sections:

📝 1. Documentation Section
Used for adding comments to describe the program – purpose, author, date, and other helpful info.


/*
 * Program: Example C Program
 * Author: Your Name
 * Date: YYYY-MM-DD
 * Description: This program demonstrates the basic structure of a C program.
*/



🔗 2. Link Section (Preprocessor Directives)
Includes header files necessary for input/output, memory management, etc.


#include <stdio.h>    // Standard Input Output Library
#include <stdlib.h>   // Standard Library for functions like malloc and free



🧾 3. Definition Section
Defines constants, macros, and user-defined data types.


#define PI 3.14       // Defining a constant
typedef struct {      // Defining a structure
    int id;
    char name[20];
} Student;



🌍 4. Global Declaration Section
Declares global variables accessible by all functions in the program.

int globalVar = 10;   // Global variable



🚀 5. Main Function Section
The starting point of the program. Contains local declarations, logic, and function calls.

int main() {
    printf("Hello, World!\n");  // Print message
    greet();                    // Call custom function

    Student student1 = {1, "Alice"};   // Structure usage
    printStudent(student1);           // Function call to display student info

    return 0;                   // Program ends
}


🧩 6. Sub-Program Section (User-defined Functions)
Contains custom functions used to organize code into reusable blocks.


// Function to display a greeting
void greet() {
    printf("Hello from the greet function!\n");
}

// Function to print student details
void printStudent(Student student) {
    printf("Student ID: %d, Name: %s\n", student.id, student.name);
}




Execution of C Program 

https://in.images.search.yahoo.com/yhs/search;_ylt=Awr1UcvPF_1nvg0cawznHgx.;_ylu=Y29sbwMEcG9zAzEEdnRpZAMEc2VjA3BpdnM-?p=execution+of+c&type=type80260-1474871987&param1=1160809670&hsimp=yhs-002&hspart=sz&ei=UTF-8&fr=yhs-sz-002&guccounter=1&guce_referrer=aHR0cHM6Ly9pbi5zZWFyY2gueWFob28uY29tL3locy9zZWFyY2g_aHNwYXJ0PXN6JmhzaW1wPXlocy0wMDImcD1leGVjdXRpb24rb2YrYyZ0eXBlPXR5cGU4MDI2MC0xNDc0ODcxOTg3JnBhcmFtMT0xMTYwODA5Njcw&guce_referrer_sig=AQAAAMIcV_u8DzJdOA3wxRpnkANBUvb4kxLgfEs4rPxMKK3M7I9Z5S2sT9SVJqEnDg6uaZDNDKmzeHje0ax8XpMvwM3C6BisVcCet2M88Vdy3gwUhuoaairoBKGrnT479Mxlah5UeTSHrzoMRxMpZIYNDpPN7c48az6u-7qHu67UzqwF#id=0&iurl=https%3A%2F%2Fslidetodoc.com%2Fpresentation_image_h%2Fcf96ae204850a6c3f31e1db0273ffef9%2Fimage-8.jpg&action=click
